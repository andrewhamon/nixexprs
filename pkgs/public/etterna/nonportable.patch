diff --git a/src/Etterna/Models/Songs/SongCacheIndex.cpp b/src/Etterna/Models/Songs/SongCacheIndex.cpp
index b1723e9..80e11b9 100644
--- a/src/Etterna/Models/Songs/SongCacheIndex.cpp
+++ b/src/Etterna/Models/Songs/SongCacheIndex.cpp
@@ -574,6 +574,7 @@ SongCacheIndex::DeleteDB()
 {
 	if (db != nullptr)
 		delete db;
+	db = nullptr;
 	FILEMAN->Remove(CACHE_DB);
 	try {
 		db = new SQLite::Database(FILEMAN->ResolvePath(CACHE_DB),
@@ -592,6 +593,7 @@ void
 SongCacheIndex::ResetDB()
 {
 	DeleteDB();
+	if (db != nullptr)
 	CreateDBTables();
 }
 void
diff --git a/src/RageUtil/File/RageFileManager.cpp b/src/RageUtil/File/RageFileManager.cpp
index 2f8fc4d..ff4e85c 100644
--- a/src/RageUtil/File/RageFileManager.cpp
+++ b/src/RageUtil/File/RageFileManager.cpp
@@ -920,6 +920,7 @@ RageFileManager::ResolvePath(const std::string& path)
 
 	vector<LoadedDriver*> apDriverList;
 	ReferenceAllDrivers(apDriverList);
+	std::reverse(apDriverList.begin(), apDriverList.end());
 
 	for (auto pDriver : apDriverList) {
 		const std::string driverPath = pDriver->GetPath(tmpPath);
@@ -934,8 +935,10 @@ RageFileManager::ResolvePath(const std::string& path)
 		if (tmpPath.substr(0, iMountPointLen) != pDriver->m_sMountPoint)
 			continue;
 
+		if (pDriver->m_pDriver->GetFileType(driverPath) != TYPE_NONE || resolvedPath.empty())
 		resolvedPath =
 		  pDriver->m_sRoot + "/" + std::string(tmpPath.substr(iMountPointLen));
+		if (pDriver->m_pDriver->GetFileType(driverPath) != TYPE_NONE)
 		break;
 	}
 
diff --git a/src/arch/ArchHooks/ArchHooks_Unix.cpp b/src/arch/ArchHooks/ArchHooks_Unix.cpp
index 4d4ce55..af9bd9b 100644
--- a/src/arch/ArchHooks/ArchHooks_Unix.cpp
+++ b/src/arch/ArchHooks/ArchHooks_Unix.cpp
@@ -431,7 +431,7 @@ ArchHooks::MountUserFilesystems(const std::string& sDirOfExecutable)
 	 */
 	const char* szHome = getenv("HOME");
 	std::string sUserDataPath = ssprintf(
-	  "%s/.%s", szHome ? szHome : ".", "stepmania-5.0"); // call an ambulance!
+	  "%s/.%s", szHome ? szHome : ".", "etterna"); // call an ambulance!
 	FILEMAN->Mount("dir", sUserDataPath + "/Announcers", "/Announcers");
 	FILEMAN->Mount("dir", sUserDataPath + "/BGAnimations", "/BGAnimations");
 	FILEMAN->Mount(
